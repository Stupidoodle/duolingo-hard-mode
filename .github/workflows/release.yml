name: "Auto Release"

on:
  push:
    # Only run if the push is a version tag, e.g. v1.2.3
    tags:
      - "v*.*.*"
  workflow_dispatch: {}

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out source code
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm ci

      - name: Build production
        run: npm run build

      - name: Extract changelog entry
        id: changelog
        run: |
          # Strip the "v" prefix from the tag name, e.g. "v1.2.3" -> "1.2.3"
          VERSION="${GITHUB_REF_NAME#v}"
          echo "Parsing CHANGELOG.md for version $VERSION"

          # 1) Try to grab lines from '## [VERSION]' (or '## VERSION') up to next '## '
          #    Then remove the last line in that range with sed '$d'.
          snippet=$(
            awk "/^## \\[?$VERSION\\]?/,/^## /{print}" CHANGELOG.md \
            | sed '$d'
          )

          # If snippet is empty, fall back to the *first* version heading in the file (top entry).
          if [ -z "$snippet" ]; then
            echo "No snippet for version $VERSION. Falling back to latest version in file..."
            # Grab the topmost version from lines matching '## [x.x.x]' or '## x.x.x'
            fallback_version=$(grep -oP '^## \[?\K(\d+\.\d+\.\d+)(?=\]?)' CHANGELOG.md | head -1)

            if [ -n "$fallback_version" ]; then
              echo "Falling back to version: $fallback_version"
              snippet=$(
                awk "/^## \\[?$fallback_version\\]?/,/^## /{print}" CHANGELOG.md \
                | sed '$d'
              )
              if [ -z "$snippet" ]; then
                snippet="No snippet found for fallback version ($fallback_version)."
              fi
            else
              snippet="No version headings found in CHANGELOG.md at all."
            fi
          fi

          # Output to GitHub Actions for subsequent steps
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$snippet"       >> $GITHUB_OUTPUT
          echo "EOF"           >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false
          # Use our snippet as the release body
          body: ${{ steps.changelog.outputs.changelog }}

      - name: Upload dist/content.bundle.js
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/content.bundle.js
          asset_name: content.bundle.js
          asset_content_type: application/javascript

      - name: Upload manifest.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: manifest.json
          asset_name: manifest.json
          asset_content_type: application/json
