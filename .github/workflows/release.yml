name: Auto Release

on:
  pull_request:
    types: [closed]  # Runs only when a PR is merged
    branches:
      - master  # Only trigger on merges to master
  workflow_dispatch: {}  # Allows manual trigger

jobs:
  release:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Check out source code
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm ci

      - name: Build production
        run: npm run build

      - name: Extract changelog entry
        id: changelog
        run: |
          VERSION=$(jq -r .version package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          snippet=$(awk "/^## \\[?$VERSION\\]?\\(?/,/^## /{print}" CHANGELOG.md | sed '$d')
          echo "changelog<<EOF" >> GITHUB_ENV
          echo "$snippet"       >> GITHUB_ENV
          echo "EOF"           >> GITHUB_ENV

      - name: Zip extension folder
        run: |
          mkdir -p extension/dist
          cp manifest.json extension/
          cp -r dist/* extension/dist/
          zip -r "extension.zip" extension

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          tag_name: "v${{ env.VERSION }}"
          release_name: "Release v${{ env.VERSION }}"
          draft: false
          prerelease: false
          body: ${{ env.changelog }}

      - name: Upload ZIP to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: extension.zip
          asset_name: extension.zip
          asset_content_type: application/zip

      - name: Refresh Access Token
        id: refresh_token
        run: |
          RESPONSE=$(curl -s -X POST \
            -d "client_id=${{ secrets.CHROME_CLIENT_ID }}" \
            -d "client_secret=${{ secrets.CHROME_CLIENT_SECRET }}" \
            -d "refresh_token=${{ secrets.CHROME_REFRESH_TOKEN }}" \
            -d "grant_type=refresh_token" \
            "https://oauth2.googleapis.com/token")
          ACCESS_TOKEN=$(echo $RESPONSE | jq -r '.access_token')
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Upload to Chrome Web Store
        run: |
          curl -X PUT \
            -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
            -H "x-goog-api-version: 2" \
            -T extension.zip \
            "https://www.googleapis.com/upload/chromewebstore/v1.1/items/${{ secrets.CHROME_EXTENSION_ID }}"

      - name: Publish to Chrome Web Store
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
            -H "x-goog-api-version: 2" \
            -H "Content-Length: 0" \
            "https://www.googleapis.com/chromewebstore/v1.1/items/${{ secrets.CHROME_EXTENSION_ID }}/publish"