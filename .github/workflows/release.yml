name: "Auto Release"

on:
  push:
    # Only run if the push is a semver-like tag (v0.6.0, v1.2.3, etc.)
    tags:
      - "v*.*.*"
  workflow_dispatch: {}

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out source code
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm ci

      - name: Build production
        run: npm run build

      # ----------------------------------------------------------
      # 1) Parse CHANGELOG.md for the snippet of the current tag
      #    If none found, fallback to the top version in the file.
      # ----------------------------------------------------------
      - name: Extract changelog entry
        id: changelog
        run: |
          VERSION="${GITHUB_REF_NAME#v}"  # e.g. v0.6.0 -> 0.6.0
          echo "Parsing CHANGELOG.md for version $VERSION..."

          # Attempt to capture from the heading for $VERSION up to the next '## ' heading.
          # We'll remove the last line of that block (the line that triggered the stop) with sed.
          snippet=$(
            awk "/^## \\[?$VERSION\\]?\\(?/,/^## /{print}" CHANGELOG.md \
            | sed '$d'
          )

          if [ -z "$snippet" ]; then
            echo "No snippet found for $VERSION. Attempting fallback to latest version in file..."
            # Grab the topmost version from lines matching '## [x.x.x]' or '## x.x.x'
            fallback_version=$(grep -oP '^## \[?\K(\d+\.\d+\.\d+)(?=\]?)' CHANGELOG.md | head -1)
            if [ -n "$fallback_version" ]; then
              echo "Falling back to version: $fallback_version"
              snippet=$(
                awk "/^## \\[?$fallback_version\\]?\\(?/,/^## /{print}" CHANGELOG.md \
                | sed '$d'
              )
              if [ -z "$snippet" ]; then
                snippet="(No snippet found for fallback version: $fallback_version.)"
              fi
            else
              snippet="(No version headings found in CHANGELOG.md at all.)"
            fi
          fi

          # Publish snippet for use in later steps
          echo "changelog<<EOF" >> GITHUB_ENV
          echo "$snippet"       >> GITHUB_ENV
          echo "EOF"           >> GITHUB_ENV

      # ----------------------------------------------------------
      # 2) Zip extension files for "Load Unpacked"
      #    (Add icons/background scripts if needed).
      # ----------------------------------------------------------
      - name: Zip extension folder
        id: zip_extension
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          # Create a temp folder
          mkdir extension
          mkdir extension/dist
          # Copy the essential files
          cp manifest.json extension/
          cp dist/content.bundle.js extension/dist/

          # If you have more assets, copy them here:
          # cp -r icons extension/
          # cp background.js extension/
          # etc.

          zip -r "duolingo-hard-mode-$VERSION.zip" extension
          ls -la

      # ----------------------------------------------------------
      # 3) Create GitHub Release with the parsed changelog snippet
      # ----------------------------------------------------------
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}          # e.g. v0.6.0
          release_name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false
          body: ${{ steps.changelog.outputs.changelog }}

      - name: Extract Version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}  # Extracts the version from 'refs/tags/vX.X.X'
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # ----------------------------------------------------------
      # 4) Upload the ZIP as a release asset
      # ----------------------------------------------------------
      - name: Upload ZIP to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: duolingo-hard-mode-$VERSION.zip
          asset_name: duolingo-hard-mode-$VERSION.zip
          asset_content_type: application/zip
