name: "Auto Release"

on:
  push:
    # Only run if the push is a version tag: v1.2.3, v2.0.0, etc.
    tags:
      - "v*.*.*"
  workflow_dispatch: {}  # Allows manual triggering

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out source code
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm ci

      - name: Build production
        run: npm run build

      # -----------------------------------------------------
      # 1) Extract the version from the tag (e.g. v1.2.3 -> 1.2.3)
      # 2) Grab the relevant section from CHANGELOG.md for that version
      #    The snippet search uses an awk range:
      #      from lines matching '^## \[?VERSION\]?'
      #      until the next '^## ' line.
      #    Then we remove the last line of that range with `sed '$d'`.
      #    Adjust if your changelog headings differ (e.g. "## 1.2.3" or "## [1.2.3]").
      # -----------------------------------------------------
      - name: Extract changelog entry
        id: changelog
        run: |
          VERSION="${GITHUB_REF_NAME#v}"  # e.g. "v1.2.3" -> "1.2.3"
          echo "Parsing changelog for version $VERSION ..."
          snippet=$(
            awk "/^## \\[?$VERSION\\]?/,/^## /{print}" CHANGELOG.md | sed '$d'
          )
          
          # If no snippet is found, you might want a fallback text:
          if [ -z "$snippet" ]; then
            echo "No snippet found, using fallback text"
            snippet="No specific changelog entry for $VERSION."
          fi

          # Output to GitHub Actions
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$snippet"       >> $GITHUB_OUTPUT
          echo "EOF"           >> $GITHUB_OUTPUT

      # -----------------------------------------------------
      # Create a new release, using the parsed changelog snippet as the body.
      # -----------------------------------------------------
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false
          body: ${{ steps.changelog.outputs.changelog }}

      # -----------------------------------------------------
      # Upload your extension assets (content.bundle.js + manifest.json)
      # to the newly created release
      # -----------------------------------------------------
      - name: Upload dist/content.bundle.js
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/content.bundle.js
          asset_name: content.bundle.js
          asset_content_type: application/javascript

      - name: Upload manifest.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: manifest.json
          asset_name: manifest.json
          asset_content_type: application/json
